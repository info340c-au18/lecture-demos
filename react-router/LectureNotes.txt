Slide 1
We're almost done with the class

Slide 2
Overall plan
Client Side Routing

Overall goal is to be using React
Build the first main feature of your project


SLIDE 3
How to install something external libraries with NPM?

When you install something via NPM it gets listed in the packages.json file


SLIDE 4
So lets talk about Bootstrap javascript thing... it uses jQuery. We don't want to uses
that. It's going to end up using jQuery.
React won't work well together.

React might not be able to keep track of everything.

So we want to find a react version of bootstrap in React

The one that works the best is ReactStrap. It uses Bootstrap 4 components

We import this library using NPM

And can use the reactstrap components once they have been imported, as 
if we had written the components ourselves

So we install these two things:
npm install reactstrap
npm install react-router-dom

SLIDE 5
Collapse() Example

We add added the code for collapse()
modified it a bit by storing the state of collapse in a state prop

added the toggle function (as a public class so we don't lose the 'this')

We let react in on the stuff now...

If you have installed jQuery already...
It's okay to have it installed
it's okay to have it as a dependency
Provided you aren't using it...

You can delete from your dependency listed
You can run uninstall with NPM
If you use uninstall, it'll both delete the line from the package.json file and
remove from the node modules folders

SLIDE 6
Plan for Today

This is new material. Not really any new syntax. Different components

Not required for Stage 3

You will need to use for Stage 4

If you want to do some client side routing... feel free.

SLIDE 7
Single page application with lots of pages (urls) with different content, but have some shared 
components... like same nav bar, same banners, or footers

Have multiple pages, but still have to reload the page every time we click a button.

Demo - Google Drive

Notice that the page currently has drive.google.com/drive/my-drive
If I click on a folder, notice that the URL changes, and some of the page rerenders

IF you watch the left nav... the page doesn't reload
It's almost like I'm making an AJAX call
it looks like you are going to a new page, but really it's the same page

We're going to do this with react

It's not as complicated as it might seem


One page (index.html). Looks like multiple pages


SLIDE 8
Client-side Routing

So how do we do this in React?

If the URL matches a route, render this component!

Render a react component... but we use conditional rendering

WE use an if statement to determine which component we want to show...

Do we show the "my drive" component? Or do we show the "folder" component

WE make that determination based on what's in the URL bar
Look at the Slide

We can look at the current urls

If the url is home - we renter <homepage>

If it's <about> we render <aboutpage>


make sense?

SLIDE 9
react-router

There are a number of ways to get access to the browser URL

So this is where we use the external library

React router

1st in class version of doing client side routing... most people use this

React Router is a library that do the "if" statement work for use

If the URL is what you want... it'll display this component

It does the if statement for use

react router dom - works for the web. That's the one to use. There's a server side one too, but we
want the dom one for client side

Notice it's in the package.json file

Use version 4.... don't use version 3


Remember we import this...


SLIDE 10
Demo


Looking at the Demo
It's a Demo
Currently is shows 

- welcome page
- about page
- blogpost listed

If I click on these hyperlinks in the NAV , if I click on these the URL changes and the page refreshes

The anchor tag sends a get request and it goes to a separate webpage

SLIDE 12
BrowserRouter

To get this to work... we need to make the <BrowserRouter> the parent of everything that you are going to adjust based
on a route 

So we put the BrowserRouter outside of everything
It just watches the URL bar. It basically has an eventhandler

It adjust state and rerenders everything inside of it.


SLIDE 13
<Route>

Then to get the conditionally displayed component we use the <route> 

<route takes two props, the path (to match) and the Component to render

The matching ... does the current path "start with" /
if it has the start, then it's a match unless you use "exact"


SLIDE 14
SWITCH
1 To enforce mutual exclusivity you can use "switch" statement

2 Or you can play with "exact"


Exact can be useful

Switch will try and match the first in the list, if it does, then it'll render that and head outside

So if you have a '/' at the top, you probably won't drop into any of the other options


"Starts with" a particular path
That's the way to think of it.


SLIDE 15
Tricky part is getting props to the component in <route>

The most confusing thing about reactrouter... 


<Route path="/blog" component={BlogPostList} />

We're not passing in the prop... how do we get these props into this route?


It crashed... we get a null error

40:31

use the render prop rather than the component

create a new function to be a call back

that you pass with the "render"

set the posts=this.state.posts

SLIDE 16
Props passed to the callback from "render"

...routerProps - to also get the existing routerProps that was passed in
it's called "spreading" or destructuring

This is an ES6 feature.
It's doing the work of creating all the individual variables and pass them all
It takes the keys for all those objects and make them the prop names and assign the values


use render whenever you want to pass your own props

use component whenever you can
but you have to use render if you need to provide your own props


How do we get other parameters from the URL?

SLIDE 17
API URIs
Inside of a URI there are parameters. 

We can use this same structure when specifying a route that we want to show

SLIDE 18

Here "PostID" is the variable

NOthing renders because there are no props passed

54:40

This example takes some work to understand

"links"





















React by default has 3 dependencies



When you 